name: Publish BotKube image

on:
  pull_request_target:
    types: [ opened, synchronize, reopened ]
    branches:
      - "main"
    paths-ignore:
      - 'branding/**'
      - 'design/**'
      - 'helm/**'
      - '.codespell-whitelist'
      - '.gitignore'
      - '.golangci.yml'
      - '.mergify.yml'
      - 'botkube-title.jpg'
      - 'botkube_arch.jpg'
      - 'CHANGELOG.md'
      - 'CODE_OF_CONDUCT.md'
      - 'comm_config.yaml'
      - 'CONTRIBUTING.md'
      - 'deploy-all-in-one.yaml'
      - 'deploy-all-in-one-tls.yaml'
      - 'LICENSE'
      - 'README.md'
      - 'resource_config.yaml'

env:
  GO_VERSION: 1.18
  HELM_VERSION: v3.9.0
  K3D_VERSION: v5.4.3
  PR_NUMBER: ${{ github.event.pull_request.number }}
  INTEGRATION_TESTS_TIMEOUT: 10m
  IMAGE_REGISTRY: "ghcr.io"
  IMAGE_REPOSITORY: "pkosiec/pr/botkube"
  TEST_IMAGE_REPOSITORY: "pkosiec/pr/botkube-test"
  IMAGE_TAG: ${{ github.event.pull_request.number }}-PR

jobs:

  save-image:
    name: Build and save BotKube image
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          install-only: true
          version: latest

      - name: Save
        run: |
          make save-images

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: botkube-${{github.sha}}
          path: /tmp/${IMAGE_REGISTRY}/*.tar
          retention-days: 1

# TODO: Build and push test image

  push-image:
    name: Push BotKube image
    runs-on: ubuntu-latest
    needs: [save-image]

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: botkube-${{github.sha}}
          path: /tmp/${IMAGE_REGISTRY}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push
        run: make load-and-push-images

      - name: Delete Docker image artifact
        uses: geekyeggo/delete-artifact@v1
        if: always()
        with:
          name: botkube-${{github.sha}}

      - name: Summary
        run: |
          cat > $GITHUB_STEP_SUMMARY << ENDOFFILE

          ### BotKube image published successfully! :rocket:
          To test BotKube with PR changes, run:

              gh pr checkout ${PR_NUMBER}
              helm install botkube -n botkube --create-namespace \\
              --set image.repository=${IMAGE_REPOSITORY} \\
              --set image.tag=${IMAGE_TAG} \\
              --set e2eTest.image.repository=${TEST_IMAGE_REPOSITORY} \\
              --set e2eTest.image.tag=${IMAGE_TAG} \\
              ./helm/botkube

          ENDOFFILE

  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: [ push-image ]

    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          persist-credentials: false

      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Download k3d
        run: "wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=${K3D_VERSION} bash"

      - name: Create cluster
        run: "k3d cluster create botkube --wait --timeout=5m"

      - name: Prepare BotKube values
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_TESTER_APP_TOKEN: ${{ secrets.SLACK_TESTER_APP_TOKEN }}
        run: |
          cat > ${RUNNER_TEMP}/values.yaml << ENDOFFILE
          communications:
            slack:
              enabled: false # Tests will override this temporarily
              token: ${SLACK_BOT_TOKEN} # Provide a valid token for BotKube app
              channel: "" # Tests will override this temporarily
          config:
            resources:
              - name: v1/configmaps
                namespaces:
                  include:
                    - botkube
                events:
                  - create
                  - update
                  - delete
              - name: v1/pods
                namespaces:
                  include:
                    - botkube
                events:
                  - create
            settings:
              clustername: sample
              kubectl:
                enabled: true
              upgradeNotifier: false
            enabled: true
          extraAnnotations:
            botkube.io/disable: "true"
          image:
            registry: ${IMAGE_REGISTRY}
            repository: ${IMAGE_REGISTRY}
            tag: ${IMAGE_TAG}
          e2eTest:
            image:
              registry: ${IMAGE_REGISTRY}
              repository: ${TEST_IMAGE_REPOSITORY}
              tag: ${IMAGE_TAG}
              pullPolicy: Always
            slack:
              testerAppToken: "${SLACK_TESTER_APP_TOKEN}"
              additionalContextMessage: "Pull request: ${PR_NUMBER} - https://github.com/infracloudio/botkube/pull/${PR_NUMBER}"
          ENDOFFILE

      - name: Install BotKube
        run: "helm install botkube --namespace botkube ./helm/botkube -f $RUNNER_TEMP/values.yaml --wait --create-namespace"

      - name: Run tests
        run: "helm test botkube --namespace botkube --timeout=$INTEGRATION_TESTS_TIMEOUT --logs"
